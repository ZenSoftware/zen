// <autogenerated />
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;

namespace Zen.GraphQL {
  public class Types {
    
    #region AccountInfo
    public class AccountInfo {
      #region members
      [JsonProperty("googleProfile")]
      public GoogleProfile googleProfile { get; set; }
    
      [JsonProperty("hasPassword")]
      public bool hasPassword { get; set; }
    
      [JsonProperty("username")]
      public string username { get; set; }
      #endregion
    }
    #endregion
    
    #region AggregateUser
    public class AggregateUser {
      #region members
      [JsonProperty("_count")]
      public UserCountAggregateOutputType count { get; set; }
    
      [JsonProperty("_max")]
      public UserMaxAggregateOutputType max { get; set; }
    
      [JsonProperty("_min")]
      public UserMinAggregateOutputType min { get; set; }
      #endregion
    }
    #endregion
    
    #region AuthExchangeTokenInput
    public class AuthExchangeTokenInput {
      #region members
      [Required]
      [JsonRequired]
      public bool rememberMe { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region AuthLoginInput
    public class AuthLoginInput {
      #region members
      [Required]
      [JsonRequired]
      public string password { get; set; }
    
      [Required]
      [JsonRequired]
      public bool rememberMe { get; set; }
    
      [Required]
      [JsonRequired]
      public string username { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region AuthPasswordChangeInput
    public class AuthPasswordChangeInput {
      #region members
      [Required]
      [JsonRequired]
      public string newPassword { get; set; }
    
      [Required]
      [JsonRequired]
      public string oldPassword { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region AuthPasswordResetConfirmationInput
    public class AuthPasswordResetConfirmationInput {
      #region members
      [Required]
      [JsonRequired]
      public string newPassword { get; set; }
    
      [Required]
      [JsonRequired]
      public string token { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region AuthPasswordResetRequestInput
    public class AuthPasswordResetRequestInput {
      #region members
      [Required]
      [JsonRequired]
      public string emailOrUsername { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region AuthRegisterInput
    public class AuthRegisterInput {
      #region members
      [Required]
      [JsonRequired]
      public string email { get; set; }
    
      [Required]
      [JsonRequired]
      public string password { get; set; }
    
      [Required]
      [JsonRequired]
      public string username { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region AuthSession
    public class AuthSession {
      #region members
      [JsonProperty("expiresIn")]
      public int expiresIn { get; set; }
    
      [JsonProperty("rememberMe")]
      public bool rememberMe { get; set; }
    
      [JsonProperty("roles")]
      public List<string> roles { get; set; }
    
      [JsonProperty("rules")]
      public List<object> rules { get; set; }
    
      [JsonProperty("token")]
      public string token { get; set; }
    
      [JsonProperty("userId")]
      public string userId { get; set; }
      #endregion
    }
    #endregion
    
    #region BatchPayload
    public class BatchPayload {
      #region members
      [JsonProperty("count")]
      public int count { get; set; }
      #endregion
    }
    #endregion
    
    #region CreateManyUserAndReturnOutputType
    public class CreateManyUserAndReturnOutputType {
      #region members
      [JsonProperty("createdAt")]
      public DateTime createdAt { get; set; }
    
      [JsonProperty("email")]
      public string email { get; set; }
    
      [JsonProperty("googleId")]
      public string googleId { get; set; }
    
      [JsonProperty("googleProfile")]
      public object googleProfile { get; set; }
    
      [JsonProperty("id")]
      public string id { get; set; }
    
      [JsonProperty("password")]
      public string password { get; set; }
    
      [JsonProperty("roles")]
      public List<string> roles { get; set; }
    
      [JsonProperty("username")]
      public string username { get; set; }
      #endregion
    }
    #endregion
    
    #region DateTimeFieldUpdateOperationsInput
    public class DateTimeFieldUpdateOperationsInput {
      #region members
      public DateTime? set { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region DateTimeFilter
    public class DateTimeFilter {
      #region members
      public DateTime? equals { get; set; }
    
      public DateTime? gt { get; set; }
    
      public DateTime? gte { get; set; }
    
      public List<DateTime> @in { get; set; }
    
      public DateTime? lt { get; set; }
    
      public DateTime? lte { get; set; }
    
      public NestedDateTimeFilter not { get; set; }
    
      public List<DateTime> notIn { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region DateTimeWithAggregatesFilter
    public class DateTimeWithAggregatesFilter {
      #region members
      public NestedIntFilter count { get; set; }
    
      public NestedDateTimeFilter max { get; set; }
    
      public NestedDateTimeFilter min { get; set; }
    
      public DateTime? equals { get; set; }
    
      public DateTime? gt { get; set; }
    
      public DateTime? gte { get; set; }
    
      public List<DateTime> @in { get; set; }
    
      public DateTime? lt { get; set; }
    
      public DateTime? lte { get; set; }
    
      public NestedDateTimeWithAggregatesFilter not { get; set; }
    
      public List<DateTime> notIn { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region GoogleProfile
    public class GoogleProfile {
      #region members
      [JsonProperty("email")]
      public string email { get; set; }
    
      [JsonProperty("family_name")]
      public string familyName { get; set; }
    
      [JsonProperty("given_name")]
      public string givenName { get; set; }
    
      [JsonProperty("locale")]
      public string locale { get; set; }
    
      [JsonProperty("name")]
      public string name { get; set; }
    
      [JsonProperty("picture")]
      public string picture { get; set; }
      #endregion
    }
    #endregion
    public enum JsonNullValueFilter {
      AnyNull,
      DbNull,
      JsonNull
    }
    
    
    #region JsonNullableFilter
    public class JsonNullableFilter {
      #region members
      public object arrayContains { get; set; }
    
      public object arrayEndsWith { get; set; }
    
      public object arrayStartsWith { get; set; }
    
      public object equals { get; set; }
    
      public object gt { get; set; }
    
      public object gte { get; set; }
    
      public object lt { get; set; }
    
      public object lte { get; set; }
    
      public object not { get; set; }
    
      public List<string> path { get; set; }
    
      public string stringContains { get; set; }
    
      public string stringEndsWith { get; set; }
    
      public string stringStartsWith { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region JsonNullableWithAggregatesFilter
    public class JsonNullableWithAggregatesFilter {
      #region members
      public NestedIntNullableFilter count { get; set; }
    
      public NestedJsonNullableFilter max { get; set; }
    
      public NestedJsonNullableFilter min { get; set; }
    
      public object arrayContains { get; set; }
    
      public object arrayEndsWith { get; set; }
    
      public object arrayStartsWith { get; set; }
    
      public object equals { get; set; }
    
      public object gt { get; set; }
    
      public object gte { get; set; }
    
      public object lt { get; set; }
    
      public object lte { get; set; }
    
      public object not { get; set; }
    
      public List<string> path { get; set; }
    
      public string stringContains { get; set; }
    
      public string stringEndsWith { get; set; }
    
      public string stringStartsWith { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region Mutation
    public class Mutation {
      #region members
      [JsonProperty("authPasswordChange")]
      public bool? authPasswordChange { get; set; }
    
      [JsonProperty("authPasswordResetConfirmation")]
      public AuthSession authPasswordResetConfirmation { get; set; }
    
      [JsonProperty("authRegister")]
      public AuthSession authRegister { get; set; }
    
      [JsonProperty("createManyUser")]
      public BatchPayload createManyUser { get; set; }
    
      [JsonProperty("createManyUserAndReturn")]
      public List<User> createManyUserAndReturn { get; set; }
    
      [JsonProperty("createOneUser")]
      public User createOneUser { get; set; }
    
      [JsonProperty("deleteManyUser")]
      public BatchPayload deleteManyUser { get; set; }
    
      [JsonProperty("deleteOneUser")]
      public User deleteOneUser { get; set; }
    
      [JsonProperty("sampleUpload")]
      public bool sampleUpload { get; set; }
    
      [JsonProperty("sampleUploadMany")]
      public List<string> sampleUploadMany { get; set; }
    
      [JsonProperty("updateManyUser")]
      public BatchPayload updateManyUser { get; set; }
    
      [JsonProperty("updateOneUser")]
      public User updateOneUser { get; set; }
    
      [JsonProperty("upsertOneUser")]
      public User upsertOneUser { get; set; }
      #endregion
    }
    #endregion
    
    #region NestedDateTimeFilter
    public class NestedDateTimeFilter {
      #region members
      public DateTime? equals { get; set; }
    
      public DateTime? gt { get; set; }
    
      public DateTime? gte { get; set; }
    
      public List<DateTime> @in { get; set; }
    
      public DateTime? lt { get; set; }
    
      public DateTime? lte { get; set; }
    
      public NestedDateTimeFilter not { get; set; }
    
      public List<DateTime> notIn { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region NestedDateTimeWithAggregatesFilter
    public class NestedDateTimeWithAggregatesFilter {
      #region members
      public NestedIntFilter count { get; set; }
    
      public NestedDateTimeFilter max { get; set; }
    
      public NestedDateTimeFilter min { get; set; }
    
      public DateTime? equals { get; set; }
    
      public DateTime? gt { get; set; }
    
      public DateTime? gte { get; set; }
    
      public List<DateTime> @in { get; set; }
    
      public DateTime? lt { get; set; }
    
      public DateTime? lte { get; set; }
    
      public NestedDateTimeWithAggregatesFilter not { get; set; }
    
      public List<DateTime> notIn { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region NestedIntFilter
    public class NestedIntFilter {
      #region members
      public int? equals { get; set; }
    
      public int? gt { get; set; }
    
      public int? gte { get; set; }
    
      public List<int> @in { get; set; }
    
      public int? lt { get; set; }
    
      public int? lte { get; set; }
    
      public NestedIntFilter not { get; set; }
    
      public List<int> notIn { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region NestedIntNullableFilter
    public class NestedIntNullableFilter {
      #region members
      public int? equals { get; set; }
    
      public int? gt { get; set; }
    
      public int? gte { get; set; }
    
      public List<int> @in { get; set; }
    
      public int? lt { get; set; }
    
      public int? lte { get; set; }
    
      public NestedIntNullableFilter not { get; set; }
    
      public List<int> notIn { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region NestedJsonNullableFilter
    public class NestedJsonNullableFilter {
      #region members
      public object arrayContains { get; set; }
    
      public object arrayEndsWith { get; set; }
    
      public object arrayStartsWith { get; set; }
    
      public object equals { get; set; }
    
      public object gt { get; set; }
    
      public object gte { get; set; }
    
      public object lt { get; set; }
    
      public object lte { get; set; }
    
      public object not { get; set; }
    
      public List<string> path { get; set; }
    
      public string stringContains { get; set; }
    
      public string stringEndsWith { get; set; }
    
      public string stringStartsWith { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region NestedStringFilter
    public class NestedStringFilter {
      #region members
      public string contains { get; set; }
    
      public string endsWith { get; set; }
    
      public string equals { get; set; }
    
      public string gt { get; set; }
    
      public string gte { get; set; }
    
      public List<string> @in { get; set; }
    
      public string lt { get; set; }
    
      public string lte { get; set; }
    
      public NestedStringFilter not { get; set; }
    
      public List<string> notIn { get; set; }
    
      public string startsWith { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region NestedStringNullableFilter
    public class NestedStringNullableFilter {
      #region members
      public string contains { get; set; }
    
      public string endsWith { get; set; }
    
      public string equals { get; set; }
    
      public string gt { get; set; }
    
      public string gte { get; set; }
    
      public List<string> @in { get; set; }
    
      public string lt { get; set; }
    
      public string lte { get; set; }
    
      public NestedStringNullableFilter not { get; set; }
    
      public List<string> notIn { get; set; }
    
      public string startsWith { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region NestedStringNullableWithAggregatesFilter
    public class NestedStringNullableWithAggregatesFilter {
      #region members
      public NestedIntNullableFilter count { get; set; }
    
      public NestedStringNullableFilter max { get; set; }
    
      public NestedStringNullableFilter min { get; set; }
    
      public string contains { get; set; }
    
      public string endsWith { get; set; }
    
      public string equals { get; set; }
    
      public string gt { get; set; }
    
      public string gte { get; set; }
    
      public List<string> @in { get; set; }
    
      public string lt { get; set; }
    
      public string lte { get; set; }
    
      public NestedStringNullableWithAggregatesFilter not { get; set; }
    
      public List<string> notIn { get; set; }
    
      public string startsWith { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region NestedStringWithAggregatesFilter
    public class NestedStringWithAggregatesFilter {
      #region members
      public NestedIntFilter count { get; set; }
    
      public NestedStringFilter max { get; set; }
    
      public NestedStringFilter min { get; set; }
    
      public string contains { get; set; }
    
      public string endsWith { get; set; }
    
      public string equals { get; set; }
    
      public string gt { get; set; }
    
      public string gte { get; set; }
    
      public List<string> @in { get; set; }
    
      public string lt { get; set; }
    
      public string lte { get; set; }
    
      public NestedStringWithAggregatesFilter not { get; set; }
    
      public List<string> notIn { get; set; }
    
      public string startsWith { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    public enum NullableJsonNullValueInput {
      DbNull,
      JsonNull
    }
    
    
    #region NullableStringFieldUpdateOperationsInput
    public class NullableStringFieldUpdateOperationsInput {
      #region members
      public string set { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    public enum NullsOrder {
      first,
      last
    }
    
    
    #region Query
    public class Query {
      #region members
      [JsonProperty("accountInfo")]
      public AccountInfo accountInfo { get; set; }
    
      [JsonProperty("aggregateUser")]
      public AggregateUser aggregateUser { get; set; }
    
      [JsonProperty("authExchangeToken")]
      public AuthSession authExchangeToken { get; set; }
    
      [JsonProperty("authLogin")]
      public AuthSession authLogin { get; set; }
    
      [JsonProperty("authPasswordResetRequest")]
      public bool? authPasswordResetRequest { get; set; }
    
      [JsonProperty("findFirstUser")]
      public User findFirstUser { get; set; }
    
      [JsonProperty("findManyUser")]
      public List<User> findManyUser { get; set; }
    
      [JsonProperty("findManyUserCount")]
      public int findManyUserCount { get; set; }
    
      [JsonProperty("findUniqueUser")]
      public User findUniqueUser { get; set; }
      #endregion
    }
    #endregion
    public enum QueryMode {
      @default,
      insensitive
    }
    
    
    #region SampleSubscriptionResult
    public class SampleSubscriptionResult {
      #region members
      [JsonProperty("message")]
      public string message { get; set; }
      #endregion
    }
    #endregion
    public enum SortOrder {
      asc,
      desc
    }
    
    
    #region SortOrderInput
    public class SortOrderInput {
      #region members
      public NullsOrder? nulls { get; set; }
    
      [Required]
      [JsonRequired]
      public SortOrder sort { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region StringFieldUpdateOperationsInput
    public class StringFieldUpdateOperationsInput {
      #region members
      public string set { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region StringFilter
    public class StringFilter {
      #region members
      public string contains { get; set; }
    
      public string endsWith { get; set; }
    
      public string equals { get; set; }
    
      public string gt { get; set; }
    
      public string gte { get; set; }
    
      public List<string> @in { get; set; }
    
      public string lt { get; set; }
    
      public string lte { get; set; }
    
      public QueryMode? mode { get; set; }
    
      public NestedStringFilter not { get; set; }
    
      public List<string> notIn { get; set; }
    
      public string startsWith { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region StringNullableFilter
    public class StringNullableFilter {
      #region members
      public string contains { get; set; }
    
      public string endsWith { get; set; }
    
      public string equals { get; set; }
    
      public string gt { get; set; }
    
      public string gte { get; set; }
    
      public List<string> @in { get; set; }
    
      public string lt { get; set; }
    
      public string lte { get; set; }
    
      public QueryMode? mode { get; set; }
    
      public NestedStringNullableFilter not { get; set; }
    
      public List<string> notIn { get; set; }
    
      public string startsWith { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region StringNullableListFilter
    public class StringNullableListFilter {
      #region members
      public List<string> equals { get; set; }
    
      public string has { get; set; }
    
      public List<string> hasEvery { get; set; }
    
      public List<string> hasSome { get; set; }
    
      public bool? isEmpty { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region StringNullableWithAggregatesFilter
    public class StringNullableWithAggregatesFilter {
      #region members
      public NestedIntNullableFilter count { get; set; }
    
      public NestedStringNullableFilter max { get; set; }
    
      public NestedStringNullableFilter min { get; set; }
    
      public string contains { get; set; }
    
      public string endsWith { get; set; }
    
      public string equals { get; set; }
    
      public string gt { get; set; }
    
      public string gte { get; set; }
    
      public List<string> @in { get; set; }
    
      public string lt { get; set; }
    
      public string lte { get; set; }
    
      public QueryMode? mode { get; set; }
    
      public NestedStringNullableWithAggregatesFilter not { get; set; }
    
      public List<string> notIn { get; set; }
    
      public string startsWith { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region StringWithAggregatesFilter
    public class StringWithAggregatesFilter {
      #region members
      public NestedIntFilter count { get; set; }
    
      public NestedStringFilter max { get; set; }
    
      public NestedStringFilter min { get; set; }
    
      public string contains { get; set; }
    
      public string endsWith { get; set; }
    
      public string equals { get; set; }
    
      public string gt { get; set; }
    
      public string gte { get; set; }
    
      public List<string> @in { get; set; }
    
      public string lt { get; set; }
    
      public string lte { get; set; }
    
      public QueryMode? mode { get; set; }
    
      public NestedStringWithAggregatesFilter not { get; set; }
    
      public List<string> notIn { get; set; }
    
      public string startsWith { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region Subscription
    public class Subscription {
      #region members
      [JsonProperty("sampleSubscription")]
      public SampleSubscriptionResult sampleSubscription { get; set; }
      #endregion
    }
    #endregion
    public enum TransactionIsolationLevel {
      ReadCommitted,
      ReadUncommitted,
      RepeatableRead,
      Serializable
    }
    
    
    #region User
    public class User {
      #region members
      [JsonProperty("createdAt")]
      public DateTime createdAt { get; set; }
    
      [JsonProperty("email")]
      public string email { get; set; }
    
      [JsonProperty("googleId")]
      public string googleId { get; set; }
    
      [JsonProperty("googleProfile")]
      public object googleProfile { get; set; }
    
      [JsonProperty("id")]
      public string id { get; set; }
    
      [JsonProperty("password")]
      public string password { get; set; }
    
      [JsonProperty("roles")]
      public List<string> roles { get; set; }
    
      [JsonProperty("rules")]
      public List<object> rules { get; set; }
    
      [JsonProperty("username")]
      public string username { get; set; }
      #endregion
    }
    #endregion
    
    #region UserCountAggregateOutputType
    public class UserCountAggregateOutputType {
      #region members
      [JsonProperty("_all")]
      public int all { get; set; }
    
      [JsonProperty("createdAt")]
      public int createdAt { get; set; }
    
      [JsonProperty("email")]
      public int email { get; set; }
    
      [JsonProperty("googleId")]
      public int googleId { get; set; }
    
      [JsonProperty("googleProfile")]
      public int googleProfile { get; set; }
    
      [JsonProperty("id")]
      public int id { get; set; }
    
      [JsonProperty("password")]
      public int password { get; set; }
    
      [JsonProperty("roles")]
      public int roles { get; set; }
    
      [JsonProperty("username")]
      public int username { get; set; }
      #endregion
    }
    #endregion
    
    #region UserCountOrderByAggregateInput
    public class UserCountOrderByAggregateInput {
      #region members
      public SortOrder? createdAt { get; set; }
    
      public SortOrder? email { get; set; }
    
      public SortOrder? googleId { get; set; }
    
      public SortOrder? googleProfile { get; set; }
    
      public SortOrder? id { get; set; }
    
      public SortOrder? password { get; set; }
    
      public SortOrder? roles { get; set; }
    
      public SortOrder? username { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region UserCreateInput
    public class UserCreateInput {
      #region members
      public DateTime? createdAt { get; set; }
    
      [Required]
      [JsonRequired]
      public string email { get; set; }
    
      public string googleId { get; set; }
    
      public object googleProfile { get; set; }
    
      public string id { get; set; }
    
      public string password { get; set; }
    
      public List<string> roles { get; set; }
    
      public string username { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region UserCreateManyInput
    public class UserCreateManyInput {
      #region members
      public DateTime? createdAt { get; set; }
    
      [Required]
      [JsonRequired]
      public string email { get; set; }
    
      public string googleId { get; set; }
    
      public object googleProfile { get; set; }
    
      public string id { get; set; }
    
      public string password { get; set; }
    
      public List<string> roles { get; set; }
    
      public string username { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region UserCreaterolesInput
    public class UserCreaterolesInput {
      #region members
      [Required]
      [JsonRequired]
      public List<string> set { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region UserGroupByOutputType
    public class UserGroupByOutputType {
      #region members
      [JsonProperty("_count")]
      public UserCountAggregateOutputType count { get; set; }
    
      [JsonProperty("_max")]
      public UserMaxAggregateOutputType max { get; set; }
    
      [JsonProperty("_min")]
      public UserMinAggregateOutputType min { get; set; }
    
      [JsonProperty("createdAt")]
      public DateTime createdAt { get; set; }
    
      [JsonProperty("email")]
      public string email { get; set; }
    
      [JsonProperty("googleId")]
      public string googleId { get; set; }
    
      [JsonProperty("googleProfile")]
      public object googleProfile { get; set; }
    
      [JsonProperty("id")]
      public string id { get; set; }
    
      [JsonProperty("password")]
      public string password { get; set; }
    
      [JsonProperty("roles")]
      public List<string> roles { get; set; }
    
      [JsonProperty("username")]
      public string username { get; set; }
      #endregion
    }
    #endregion
    
    #region UserMaxAggregateOutputType
    public class UserMaxAggregateOutputType {
      #region members
      [JsonProperty("createdAt")]
      public DateTime? createdAt { get; set; }
    
      [JsonProperty("email")]
      public string email { get; set; }
    
      [JsonProperty("googleId")]
      public string googleId { get; set; }
    
      [JsonProperty("id")]
      public string id { get; set; }
    
      [JsonProperty("password")]
      public string password { get; set; }
    
      [JsonProperty("username")]
      public string username { get; set; }
      #endregion
    }
    #endregion
    
    #region UserMaxOrderByAggregateInput
    public class UserMaxOrderByAggregateInput {
      #region members
      public SortOrder? createdAt { get; set; }
    
      public SortOrder? email { get; set; }
    
      public SortOrder? googleId { get; set; }
    
      public SortOrder? id { get; set; }
    
      public SortOrder? password { get; set; }
    
      public SortOrder? username { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region UserMinAggregateOutputType
    public class UserMinAggregateOutputType {
      #region members
      [JsonProperty("createdAt")]
      public DateTime? createdAt { get; set; }
    
      [JsonProperty("email")]
      public string email { get; set; }
    
      [JsonProperty("googleId")]
      public string googleId { get; set; }
    
      [JsonProperty("id")]
      public string id { get; set; }
    
      [JsonProperty("password")]
      public string password { get; set; }
    
      [JsonProperty("username")]
      public string username { get; set; }
      #endregion
    }
    #endregion
    
    #region UserMinOrderByAggregateInput
    public class UserMinOrderByAggregateInput {
      #region members
      public SortOrder? createdAt { get; set; }
    
      public SortOrder? email { get; set; }
    
      public SortOrder? googleId { get; set; }
    
      public SortOrder? id { get; set; }
    
      public SortOrder? password { get; set; }
    
      public SortOrder? username { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region UserOrderByWithAggregationInput
    public class UserOrderByWithAggregationInput {
      #region members
      public UserCountOrderByAggregateInput count { get; set; }
    
      public UserMaxOrderByAggregateInput max { get; set; }
    
      public UserMinOrderByAggregateInput min { get; set; }
    
      public SortOrder? createdAt { get; set; }
    
      public SortOrder? email { get; set; }
    
      public SortOrderInput googleId { get; set; }
    
      public SortOrderInput googleProfile { get; set; }
    
      public SortOrder? id { get; set; }
    
      public SortOrderInput password { get; set; }
    
      public SortOrder? roles { get; set; }
    
      public SortOrderInput username { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region UserOrderByWithRelationInput
    public class UserOrderByWithRelationInput {
      #region members
      public SortOrder? createdAt { get; set; }
    
      public SortOrder? email { get; set; }
    
      public SortOrderInput googleId { get; set; }
    
      public SortOrderInput googleProfile { get; set; }
    
      public SortOrder? id { get; set; }
    
      public SortOrderInput password { get; set; }
    
      public SortOrder? roles { get; set; }
    
      public SortOrderInput username { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    public enum UserScalarFieldEnum {
      createdAt,
      email,
      googleId,
      googleProfile,
      id,
      password,
      roles,
      username
    }
    
    
    #region UserScalarWhereWithAggregatesInput
    public class UserScalarWhereWithAggregatesInput {
      #region members
      public List<UserScalarWhereWithAggregatesInput> and { get; set; }
    
      public List<UserScalarWhereWithAggregatesInput> not { get; set; }
    
      public List<UserScalarWhereWithAggregatesInput> or { get; set; }
    
      public DateTimeWithAggregatesFilter createdAt { get; set; }
    
      public StringWithAggregatesFilter email { get; set; }
    
      public StringNullableWithAggregatesFilter googleId { get; set; }
    
      public JsonNullableWithAggregatesFilter googleProfile { get; set; }
    
      public StringWithAggregatesFilter id { get; set; }
    
      public StringNullableWithAggregatesFilter password { get; set; }
    
      public StringNullableListFilter roles { get; set; }
    
      public StringNullableWithAggregatesFilter username { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region UserUncheckedCreateInput
    public class UserUncheckedCreateInput {
      #region members
      public DateTime? createdAt { get; set; }
    
      [Required]
      [JsonRequired]
      public string email { get; set; }
    
      public string googleId { get; set; }
    
      public object googleProfile { get; set; }
    
      public string id { get; set; }
    
      public string password { get; set; }
    
      public List<string> roles { get; set; }
    
      public string username { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region UserUncheckedUpdateInput
    public class UserUncheckedUpdateInput {
      #region members
      public DateTime? createdAt { get; set; }
    
      public string email { get; set; }
    
      public string googleId { get; set; }
    
      public object googleProfile { get; set; }
    
      public string id { get; set; }
    
      public string password { get; set; }
    
      public List<string> roles { get; set; }
    
      public string username { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region UserUncheckedUpdateManyInput
    public class UserUncheckedUpdateManyInput {
      #region members
      public DateTime? createdAt { get; set; }
    
      public string email { get; set; }
    
      public string googleId { get; set; }
    
      public object googleProfile { get; set; }
    
      public string id { get; set; }
    
      public string password { get; set; }
    
      public List<string> roles { get; set; }
    
      public string username { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region UserUpdateInput
    public class UserUpdateInput {
      #region members
      public DateTime? createdAt { get; set; }
    
      public string email { get; set; }
    
      public string googleId { get; set; }
    
      public object googleProfile { get; set; }
    
      public string id { get; set; }
    
      public string password { get; set; }
    
      public List<string> roles { get; set; }
    
      public string username { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region UserUpdateManyMutationInput
    public class UserUpdateManyMutationInput {
      #region members
      public DateTime? createdAt { get; set; }
    
      public string email { get; set; }
    
      public string googleId { get; set; }
    
      public object googleProfile { get; set; }
    
      public string id { get; set; }
    
      public string password { get; set; }
    
      public List<string> roles { get; set; }
    
      public string username { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region UserUpdaterolesInput
    public class UserUpdaterolesInput {
      #region members
      public List<string> push { get; set; }
    
      public List<string> set { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region UserWhereInput
    public class UserWhereInput {
      #region members
      public List<UserWhereInput> and { get; set; }
    
      public List<UserWhereInput> not { get; set; }
    
      public List<UserWhereInput> or { get; set; }
    
      public DateTimeFilter createdAt { get; set; }
    
      public StringFilter email { get; set; }
    
      public StringNullableFilter googleId { get; set; }
    
      public JsonNullableFilter googleProfile { get; set; }
    
      public StringFilter id { get; set; }
    
      public StringNullableFilter password { get; set; }
    
      public StringNullableListFilter roles { get; set; }
    
      public StringNullableFilter username { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
    
    #region UserWhereUniqueInput
    public class UserWhereUniqueInput {
      #region members
      public List<UserWhereInput> and { get; set; }
    
      public List<UserWhereInput> not { get; set; }
    
      public List<UserWhereInput> or { get; set; }
    
      public DateTimeFilter createdAt { get; set; }
    
      public string email { get; set; }
    
      public string googleId { get; set; }
    
      public JsonNullableFilter googleProfile { get; set; }
    
      public string id { get; set; }
    
      public StringNullableFilter password { get; set; }
    
      public StringNullableListFilter roles { get; set; }
    
      public string username { get; set; }
      #endregion
    
      #region methods
      public dynamic GetInputObject()
      {
        IDictionary<string, object> d = new System.Dynamic.ExpandoObject();
    
        var properties = GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
        foreach (var propertyInfo in properties)
        {
          var value = propertyInfo.GetValue(this);
          var defaultValue = propertyInfo.PropertyType.IsValueType ? Activator.CreateInstance(propertyInfo.PropertyType) : null;
    
          var requiredProp = propertyInfo.GetCustomAttributes(typeof(JsonRequiredAttribute), false).Length > 0;
    
          if (requiredProp || value != defaultValue)
          {
            d[propertyInfo.Name] = value;
          }
        }
        return d;
      }
      #endregion
    }
    #endregion
  }
  
}
